#
# Copyright (C) 2015 Cybernetica
#
# Research/Commercial License Usage
# Licensees holding a valid Research License or Commercial License
# for the Software may use this file according to the written
# agreement between you and Cybernetica.
#
# GNU General Public License Usage
# Alternatively, this file may be used under the terms of the GNU
# General Public License version 3.0 as published by the Free Software
# Foundation and appearing in the file LICENSE.GPL included in the
# packaging of this file.  Please review the following information to
# ensure the GNU General Public License version 3.0 requirements will be
# met: http://www.gnu.org/copyleft/gpl-3.0.html.
#
# For further information, please contact us at sharemind@cyber.ee.
#

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
PROJECT(SHAREMIND_APPSERV_BUILD NONE)

INCLUDE(Thing.cmake)
Thing_addKeywords(SHAREMIND_TYPE)

IF(NOT DEFINED SHAREMIND_PROJECTFILE)
  SET(SHAREMIND_PROJECTFILE "${CMAKE_CURRENT_SOURCE_DIR}/Projects.cmake")
ENDIF()
SET(SHAREMIND_PROJECTS_LIST_PASS "INIT")

INCLUDE("${CMAKE_CURRENT_SOURCE_DIR}/config.local" OPTIONAL)
INCLUDE("${CMAKE_CURRENT_BINARY_DIR}/config.local" OPTIONAL)

MESSAGE(STATUS "Using ${SHAREMIND_PROJECTFILE} as project file.")

IF(DEFINED SHAREMIND_INSTALL_PREFIX)
  SET(CMAKE_INSTALL_PREFIX "${SHAREMIND_INSTALL_PREFIX}")
ELSE()
  IF(NOT ("${CMAKE_BUILD_TYPE}" STREQUAL "Release"))
    SET(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/prefix")
  ENDIF()
ENDIF()
LIST(APPEND CMAKE_PREFIX_PATH "${CMAKE_INSTALL_PREFIX}")
LIST(REMOVE_DUPLICATES CMAKE_PREFIX_PATH)

IF(NOT DEFINED Thing_SKIP)
  INCLUDE("${CMAKE_CURRENT_SOURCE_DIR}/profiles/common.cmake" REQUIRED)
ENDIF()

# Parse project list:
ThingNewEmptyList(SHAREMIND_TARGETS)
ThingNewEmptyList(SHAREMIND_TARGETS_DEP)
ThingNewEmptyList(SHAREMIND_TARGETS_ALL)
MACRO(SharemindAddCommon name)
  LIST(APPEND SHAREMIND_TARGETS_ALL "${name}")
  ThingNewEmptyList("SHAREMIND_ARGS_${name}")
  LIST(APPEND "SHAREMIND_ARGS_${name}" ${ARGN})
  ThingNewEmptyList("SHAREMIND_DEPS_${name}")
  ThingNewEmptyList("SHAREMIND_RDEPS_${name}")
  Thing_getArgs_concat("${ARGN}" DEPENDS SharemindAddExternalDependency_deps)
  FOREACH(d IN LISTS SharemindAddExternalDependency_deps)
    LIST(FIND Thing_SKIP "${d}" isSkipped)
    IF(${isSkipped} EQUAL -1)
      LIST(APPEND "SHAREMIND_DEPS_${name}" "${d}")
      LIST(APPEND "SHAREMIND_RDEPS_${d}" "${name}")
    ENDIF()
  ENDFOREACH()
  UNSET(d)
  LIST(APPEND "${listName}" "${name}")
ENDMACRO()
MACRO(SharemindAddExternalDependency name)
  LIST(FIND Thing_SKIP "${name}" isSkipped)
  IF(${isSkipped} EQUAL -1)
    LIST(APPEND SHAREMIND_TARGETS_DEP "${name}")
    SharemindAddCommon("${name}" ${ARGN})
  ENDIF()
ENDMACRO()
MACRO(SharemindAddRepository name)
  LIST(FIND Thing_SKIP "${name}" isSkipped)
  IF(${isSkipped} EQUAL -1)
    LIST(APPEND SHAREMIND_TARGETS "${name}")
    Thing_getArgs_concat("${ARGN}" GIT_REPOSITORY "SHAREMIND_REPOSITORY_${name}")
    SharemindAddCommon("${name}" ${ARGN})
  ENDIF()
ENDMACRO()
SET(SHAREMIND_PROJECTS_LIST_PASS "PARSE_ONLY")
INCLUDE("${SHAREMIND_PROJECTFILE}")
LIST(SORT SHAREMIND_TARGETS_DEP)
LIST(SORT SHAREMIND_TARGETS)
LIST(SORT SHAREMIND_TARGETS_ALL)
FUNCTION(SharemindCalcDeepDeps prefix name out)
  UNSET(p)
  ThingNewEmptyList(p)
  FOREACH(d IN LISTS "${prefix}${name}")
    LIST(APPEND p "${d}")
    SharemindCalcDeepDeps("${prefix}" "${d}" o)
    LIST(APPEND p ${o})
    UNSET(o)
  ENDFOREACH()
  LIST(REMOVE_DUPLICATES p)
  SET("${out}" ${p} PARENT_SCOPE)
  UNSET(p)
ENDFUNCTION()
FOREACH(t IN LISTS SHAREMIND_TARGETS_ALL)
  SharemindCalcDeepDeps("SHAREMIND_DEPS_" "${t}" "SHAREMIND_DEEPDEPS_${t}")
  SharemindCalcDeepDeps("SHAREMIND_RDEPS_" "${t}" "SHAREMIND_DEEPRDEPS_${t}")
ENDFOREACH()
UNSET(t)

# List targets to be built:
STRING(REPLACE ";" " " SHAREMIND_TARGETS_DEP_STR "${SHAREMIND_TARGETS_DEP}")
STRING(REPLACE ";" " " SHAREMIND_TARGETS_STR "${SHAREMIND_TARGETS}")
MESSAGE(STATUS "Building dependencies: ${SHAREMIND_TARGETS_DEP_STR}")
MESSAGE(STATUS "Building targets: ${SHAREMIND_TARGETS_STR}")

# Generate build graph:
FIND_PROGRAM(DOT_COMMAND dot)
IF(DOT_COMMAND)
  SET(f "${CMAKE_CURRENT_BINARY_DIR}/graph.dot")
  FILE(WRITE "${f}" "digraph \"build.git\" {\n")
  FILE(APPEND "${f}" "  compound = true; rankdir = TB; style = filled;\n")
  FILE(APPEND "${f}" "  nodesep = 0.5; ranksep = 5; remincross = true;\n")
  FILE(APPEND "${f}" "  searchsize = 9999;\n\n")
  FILE(APPEND "${f}" "  node [shape=box style=filled];\n\n")
  SET(SHAREMIND_MAXRDEPS 0)
  FOREACH(t IN LISTS SHAREMIND_TARGETS_ALL)
    LIST(LENGTH "SHAREMIND_DEEPRDEPS_${t}" l)
    IF(SHAREMIND_MAXRDEPS LESS l)
      SET(SHAREMIND_MAXRDEPS "${l}")
    ENDIF()
    UNSET(l)
  ENDFOREACH()
  UNSET(t)
  FUNCTION(ZEROPREFIX maxlen v out)
    STRING(LENGTH "${v}" l)
    IF(l LESS maxlen)
      MATH(EXPR m "${maxlen} - 1")
      ZEROPREFIX("${m}" "0${v}" v)
    ENDIF()
    SET("${out}" "${v}" PARENT_SCOPE)
  ENDFUNCTION()
  SET(i 0)
  LIST(LENGTH SHAREMIND_TARGETS_ALL k)
  FOREACH(t IN LISTS SHAREMIND_TARGETS_ALL)
    MATH(EXPR h "((${k} - ${i} - 1) * 10000) / ${k}")
    ZEROPREFIX(4 "${h}" h)
    LIST(LENGTH "SHAREMIND_DEEPRDEPS_${t}" r)
    MATH(EXPR s "(${r} * 10000) / (${SHAREMIND_MAXRDEPS} + 1)") # [0,10k)
    UNSET(r)
    MATH(EXPR s "((${s} + 3334) * 10000) / 13333") # [2500,10k)
    MATH(EXPR v "12499-${s}")
    ZEROPREFIX(4 "${s}" s)
    ZEROPREFIX(4 "${v}" v)
    FILE(APPEND "${f}" "\n  \"${t}\" [fillcolor=\"0.${h}, 0.${s}, 0.${v}\"];\n")
    UNSET(h)
    UNSET(s)
    UNSET(v)
    LIST(LENGTH "SHAREMIND_DEPS_${t}" l)
    IF("${l}" GREATER 0)
      FILE(APPEND "${f}" "  \"${t}\" -> {")
      FOREACH(d IN LISTS "SHAREMIND_DEPS_${t}")
        FILE(APPEND "${f}" " \"${d}\"")
      ENDFOREACH()
      UNSET(d)
      FILE(APPEND "${f}" " };\n")
    ENDIF()
    UNSET(l)
    MATH(EXPR i "${i} + 1")
  ENDFOREACH()
  UNSET(k)
  UNSET(i)
  UNSET(t)
  FILE(APPEND "${f}" "}")
  UNSET(f)
  MESSAGE(STATUS "Wrote dependency graph description file (graph.dot).")
  ADD_CUSTOM_TARGET("graph"
    COMMAND "${DOT_COMMAND}" "-Tpng" "graph.dot" "-o" "graph.png"
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/"
    COMMENT "Generating graph.png")
ENDIF()

# Add targets to build:
MACRO(SharemindAddExternalDependency name)
  Thing_resetArgs("${ARGN}" SHAREMIND_TYPE "externalDependency" a)
  Thing_add("${name}" ${a})
  UNSET(a)
ENDMACRO()
MACRO(SharemindAddRepository name)
  Thing_resetArgs("${ARGN}" SHAREMIND_TYPE "sharemindRepository" a)
  Thing_add("${name}" ${a})
  UNSET(a)
ENDMACRO()
SET(SHAREMIND_PROJECTS_LIST_PASS "FINAL")
INCLUDE("${SHAREMIND_PROJECTFILE}")
MESSAGE(STATUS "Added all targets to build.")
MESSAGE(STATUS "The full CMAKE_PREFIX_PATH list is: ${CMAKE_PREFIX_PATH}")

# Add "deps" meta-target to build all dependencies:
ADD_CUSTOM_TARGET(deps
  DEPENDS ${SHAREMIND_TARGETS_DEP}
  COMMENT "Finished building all dependencies")

# Write meta-information to files:
FUNCTION(WriteMetaInfoList filename list)
  LIST(LENGTH list l)
  IF("${l}" GREATER 0)
    STRING(REPLACE ";" "\n" o "${list}")
    SET(o "${o}\n")
  ELSE()
    SET(o "")
  ENDIF()
  FILE(WRITE "${CMAKE_CURRENT_BINARY_DIR}/${filename}" "${o}")
ENDFUNCTION()
WriteMetaInfoList("projectfile.txt" "${SHAREMIND_PROJECTFILE}")
WriteMetaInfoList("targets.txt" "${SHAREMIND_TARGETS}")
WriteMetaInfoList("deps.txt" "${SHAREMIND_TARGETS_DEP}")
WriteMetaInfoList("all.txt" "${SHAREMIND_TARGETS_ALL}")
FOREACH(t IN LISTS SHAREMIND_TARGETS_ALL)
  WriteMetaInfoList("${t}/self.txt" "${t}")
  WriteMetaInfoList("${t}/deps.txt" "${SHAREMIND_DEPS_${t}}")
  WriteMetaInfoList("${t}/rdeps.txt" "${SHAREMIND_RDEPS_${t}}")
  WriteMetaInfoList("${t}/deepdeps.txt" "${SHAREMIND_DEEPDEPS_${t}}")
  WriteMetaInfoList("${t}/deeprdeps.txt" "${SHAREMIND_DEEPRDEPS_${t}}")
  Thing_getProperty("${t}" source_dir o)
  WriteMetaInfoList("${t}/sourcedir.txt" "${o}")
  UNSET(o)
ENDFOREACH()
FOREACH(t IN LISTS SHAREMIND_TARGETS)
  WriteMetaInfoList("${t}/repository.txt" "${SHAREMIND_REPOSITORY_${t}}")
ENDFOREACH()
UNSET(t)
MESSAGE(STATUS "Wrote build meta-information files.")

IF(COMMAND Sharemind_hook_postLists)
  MESSAGE(STATUS "Executing post-CMakeLists.txt hook...")
  Sharemind_hook_postLists()
ENDIF()
